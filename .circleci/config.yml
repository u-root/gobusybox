version: 2

templates:
  gopath-template: &gopath-template
    docker:
      - image: circleci/golang:1.13
    working_directory: /go/src/github.com/u-root/gobusybox
    environment:
      - GOPATH: "/go"
      - CGO_ENABLED: 0

  gomod-template: &gomod-template
    docker:
      - image: circleci/golang:1.13
    working_directory: /home/circleci/gobusybox
    environment:
      - CGO_ENABLED: 0
      - GO111MODULE: "auto"

  bazel-template: &bazel-template
    docker:
      - image: l.gcr.io/google/bazel:latest
    working_directory: /go/bazel_gobusybox
    environment:
      - GOPATH: "/go"


workflows:
  version: 2
  build:
    jobs:
      - clean-gopath
      - clean-gomod
      - clean-makebb
      - clean-bazel
      - build-gopath:
          requires:
            - clean-makebb
            - clean-gopath
      - build-gomod:
          requires:
            - clean-makebb
            - clean-gomod
      - build-bazel:
          requires:
            - clean-bazel

jobs:
  clean-makebb:
    <<: *gomod-template
    steps:
      - checkout
      - run:
          name: check generated code
          command: |
            mkdir -p /go/bin
            go build ./src/cmd/embedvar
            cp ./embedvar $GOPATH/bin
            export PATH=$GOPATH/bin:$PATH
            cd src/pkg/bb
            go generate
            git status
            if [[ -n "$(git status --porcelain .)" ]]; then
              echo 'Generated bbmain code is out of date. Run `go install ./src/cmd/embevar && cd src/pkg/bb && go generate` and then check changes in git.'
              git status --porcelain .
              git diff
              exit 1
            fi

  clean-gopath:
    <<: *gopath-template
    steps:
      - checkout
      - run:
          name: Install dep
          command: |
            wget https://github.com/golang/dep/releases/download/v0.5.4/dep-linux-amd64
            mv dep-linux-amd64 dep
            chmod +x dep
      - run:
          name: Check vendored deps
          command: |
            cd vendortest
            ../dep version
            ../dep status
            ../dep ensure -vendor-only
            git status
            if [[ -n "$(git status --porcelain vendor)" ]]; then
              echo 'vendor/ is out-of-date: run `cd vendortest && dep ensure -vendor-only` and then check in the changes'
              echo 'If `cd vendortest && dep ensure` results in no changes, make sure you are using the latest relase of dep'
              git status --porcelain vendor
              exit 1
            fi
      - run:
          name: vet
          command: go vet ./vendortest/...
      - run:
          name: gofmt
          command: |
            cd vendortest
            test -z "$(gofmt -s -l $(find -name '*.go' | grep -v /vendor/))"

  build-gopath:
    <<: *gopath-template
    steps:
      - checkout
      - run:
          name: go env
          command: go env
      - run:
          name: gobuilds-gopath
          command: ./gobuilds-gopath.sh
      - run:
          name: build u-root (vendored)
          command: |
            (cd src/cmd/makebb && go build)
            GO111MODULE=off go get github.com/u-root/u-root
            ./src/cmd/makebb/makebb ../u-root/cmds/*/*

  clean-gomod:
    <<: *gomod-template
    steps:
      - checkout
      - run:
          name: go mod tidy
          command: |
            (cd src && go mod tidy && go mod verify)
            (cd modtest && go mod tidy && go mod verify)
            (cd modtest/nestedmod && go mod tidy && go mod verify)
            git status
            if [[ -n "$(git status --porcelain .)" ]]; then
              echo 'go.mod/go.sum is out-of-date: run `go mod tidy` and then check in the changes'
              echo 'If `go mod tidy` results in no changes, make sure you are using the latest relase of Go'
              git status --porcelain vendor
              exit 1
            fi
      - run:
          name: vet
          command: |
            (cd src && go vet ./...)
            (cd modtest && go vet ./...)
            (cd modtest/nestedmod && go vet ./...)
      - run:
          name: gofmt
          command: |
            (cd src && test -z "$(gofmt -s -l $(find -name '*.go')")
            (cd modtest && test -z "$(gofmt -s -l $(find -name '*.go')")

  build-gomod:
    <<: *gomod-template
    steps:
      - checkout
      - run:
          name: gobuilds
          command: ./gobuilds.sh

  clean-bazel:
    <<: *bazel-template
    steps:
      - checkout
      - run:
          name: run gazelle
          command: |
            cd src && bazel run //:gazelle
            git status
            if [[ -n "$(git status --porcelain src)" ]]; then
              echo 'BUILD files are out-of-date: run `cd src && bazel run //:gazelle` and then check in the changes'
              git status --porcelain src
              exit 1
            fi

  build-bazel:
    <<: *bazel-template
    steps:
      - checkout
      - run:
          name: build busybox
          command: cd src && bazel build //:bb
      - run:
          name: build everything
          command: cd src && bazel build //...
      - run:
          name: test everything
          command: cd src && bazel test //...
