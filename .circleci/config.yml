version: 2

templates:
  gopath-template: &gopath-template
    working_directory: /go/src/github.com/u-root/gobusybox
    environment:
      - GOPATH: "/go"
      - CGO_ENABLED: 0
      - GO111MODULE: "off"

  gomod-template: &gomod-template
    working_directory: /home/circleci/gobusybox
    environment:
      - CGO_ENABLED: 0
      - GO111MODULE: "auto"

  go113-template: &go113-template
    docker:
      - image: circleci/golang:1.13

  go114-template: &go114-template
    docker:
      - image: circleci/golang:1.14

  go115-template: &go115-template
    docker:
      - image: circleci/golang:1.15

  go116-template: &go116-template
    docker:
      - image: circleci/golang:1.16

  bazel-template: &bazel-template
    docker:
      - image: l.gcr.io/google/bazel:latest
    working_directory: /go/bazel_gobusybox
    environment:
      - GOPATH: "/go"
    resource_class: large

  build-gomod-template: &build-gomod-template
    steps:
      - checkout
      - run:
          name: individual commands & packages build
          command: |
            (cd src && go build ./...)
            (cd test/diamonddep/mod1 && go build ./...)
            # test/diamonddep/mod2 doesn't build on its own due to mutual
            # dependency.
            (cd test/diamonddep/mod3 && go build ./...)
            (cd test/normaldeps/mod1 && go build ./...)
            (cd test/normaldeps/mod2 && go build ./...)
            (cd test/requestconflict/mod5 && go build ./...)
            (cd test/requestconflict/mod6 && go build ./...)
            (cd test/nested && go build ./...)
            (cd test/nested/nestedmod && go build ./...)
      - run:
          name: gobuilds
          command: ./gobuilds.sh
      - run:
          name: build u-root & u-bmc & gokrazy & p9
          command: ./test-external.sh

  build-gopath-template: &build-gopath-template
    steps:
      - checkout
      - run:
          name: go env
          command: go env
      - run:
          name: gobuilds-gopath
          command: ./gobuilds-gopath.sh
      - run:
          name: build u-root (vendored)
          command: |
            (cd src/cmd/makebb && go build)
            GO111MODULE=off go get github.com/u-root/u-root

workflows:
  version: 2
  build:
    jobs:
      - clean-gopath
      - clean-gomod
      - clean-makebb
      - clean-bazel
      - build-gopath-go113:
          requires:
            - clean-makebb
            - clean-gopath
      - build-gopath-go114:
          requires:
            - clean-makebb
            - clean-gopath
      - build-gopath-go115:
          requires:
            - clean-makebb
            - clean-gopath
      - build-gopath-go116:
          requires:
            - clean-makebb
            - clean-gopath
      - build-gomod-go113:
          requires:
            - clean-makebb
            - clean-gomod
      - build-gomod-go114:
          requires:
            - clean-makebb
            - clean-gomod
      - build-gomod-go115:
          requires:
            - clean-makebb
            - clean-gomod
      - build-gomod-go116:
          requires:
            - clean-makebb
            - clean-gomod
      - build-bazel:
          requires:
            - clean-bazel
      - build-bazel-cross:
          requires:
            - clean-bazel
      - build-bazel-test:
          requires:
            - clean-bazel
  nightly:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - main
    jobs:
      - build-gopath-go113
      - build-gopath-go114
      - build-gopath-go115
      - build-gopath-go116
      - build-gomod-go113
      - build-gomod-go114
      - build-gomod-go115
      - build-gomod-go116
      - build-bazel
      - build-bazel-cross
      - build-bazel-test

jobs:
  clean-makebb:
    <<: [*go116-template, *gomod-template]
    steps:
      - checkout
      - run:
          name: check generated code
          command: |
            mkdir -p /go/bin
            go build ./src/cmd/embedvar
            cp ./embedvar $GOPATH/bin
            export PATH=$GOPATH/bin:$PATH
            cd src/pkg/bb
            go generate
            git status
            if [[ -n "$(git status --porcelain .)" ]]; then
              echo 'Generated bbmain code is out of date. Run `go install ./src/cmd/embevar && cd src/pkg/bb && go generate` and then check changes in git.'
              git status --porcelain .
              git diff
              exit 1
            fi

  clean-gopath:
    <<: [*go116-template, *gopath-template]
    steps:
      - checkout
      - run:
          name: Install dep
          command: |
            wget https://github.com/golang/dep/releases/download/v0.5.4/dep-linux-amd64
            mv dep-linux-amd64 dep
            chmod +x dep
      - run:
          name: Check vendored deps
          command: |
            cd vendortest
            ../dep version
            ../dep status
            ../dep ensure -vendor-only
            git status
            if [[ -n "$(git status --porcelain vendor)" ]]; then
              echo 'vendor/ is out-of-date: run `cd vendortest && dep ensure -vendor-only` and then check in the changes'
              echo 'If `cd vendortest && dep ensure` results in no changes, make sure you are using the latest relase of dep'
              git status --porcelain vendor
              exit 1
            fi
      - run:
          name: vet
          command: go vet ./vendortest/...
      - run:
          name: gofmt
          command: |
            cd vendortest
            test -z "$(gofmt -s -l $(find -name '*.go' | grep -v /vendor/))"

  build-gopath-go113:
    <<: [*go113-template, *gopath-template, *build-gopath-template]

  build-gopath-go114:
    <<: [*go114-template, *gopath-template, *build-gopath-template]

  build-gopath-go115:
    <<: [*go115-template, *gopath-template, *build-gopath-template]

  build-gopath-go116:
    <<: [*go116-template, *gopath-template, *build-gopath-template]

  clean-gomod:
    <<: [*go116-template, *gomod-template]
    steps:
      - checkout
      - run:
          name: go mod tidy
          command: |
            (cd src && go mod tidy && go mod verify)
            (cd test/diamonddep/mod1 && go mod tidy && go mod verify)
            # NOTE: Specifically do NOT tidy test/diamondeps/mod2. It doesn't
            # build on its own locally due to the mutual dependency; and we do
            # not want hashes of our own repository in here -- they'll always be
            # out of date.
            (cd test/diamonddep/mod3 && go mod tidy && go mod verify)
            (cd test/normaldeps/mod1 && go mod tidy && go mod verify)
            (cd test/normaldeps/mod2 && go mod tidy && go mod verify)
            (cd test/requestconflict/mod5 && go mod tidy && go mod verify)
            (cd test/requestconflict/mod6 && go mod tidy && go mod verify)
            (cd test/nested && go mod tidy && go mod verify)
            (cd test/nested/nestedmod && go mod tidy && go mod verify)
            git status
            if [[ -n "$(git status --porcelain .)" ]]; then
              echo 'go.mod/go.sum is out-of-date: run `go mod tidy` in the right module directories (see git status) and then check in the changes'
              echo 'If `go mod tidy` results in no changes, make sure you are using the latest relase of Go'
              git status --porcelain .
              exit 1
            fi
      - run:
          name: vet
          command: |
            (cd src && go vet ./...)
            (cd test/diamonddep/mod1 && go vet ./...)
            # test/diamonddep/mod2 doesn't build locally on its own due to
            # mutual dependency.
            (cd test/diamonddep/mod3 && go vet ./...)
            (cd test/normaldeps/mod1 && go vet ./...)
            (cd test/normaldeps/mod2 && go vet ./...)
            (cd test/requestconflict/mod5 && go vet ./...)
            (cd test/requestconflict/mod6 && go vet ./...)
            (cd test/nested && go vet ./...)
            (cd test/nested/nestedmod && go vet ./...)
      - run:
          name: gofmt
          command: |
            (cd src && test -z "$(gofmt -s -l $(find -name '*.go'))")
            (cd test && test -z "$(gofmt -s -l $(find -name '*.go'))")

  build-gomod-go113:
    <<: [*go113-template, *gomod-template, *build-gomod-template]

  build-gomod-go114:
    <<: [*go114-template, *gomod-template, *build-gomod-template]

  build-gomod-go115:
    <<: [*go115-template, *gomod-template, *build-gomod-template]

  build-gomod-go116:
    <<: [*go116-template, *gomod-template, *build-gomod-template]

  clean-bazel:
    <<: *bazel-template
    steps:
      - checkout
      - run:
          name: run gazelle
          command: |
            bazel run :gazelle
            git status
            if [[ -n "$(git status --porcelain .)" ]]; then
              echo 'BUILD files are out-of-date: run `bazel run :gazelle` and then check in the changes'
              git status --porcelain .
              exit 1
            fi
      - run:
          name: sync bazel deps.bzl with src/go.mod
          command: |
            bazel run //:gazelle -- update-repos -from_file=src/go.mod -to_macro=deps.bzl%go_dependencies
            git status
            if [[ -n "$(git status --porcelain .)" ]]; then
              echo 'go.mod deps are out of sync with deps.bzl: run '
              echo '  bazel run //:gazelle -- update-repos -from_file=src/go.mod -to_macro=deps.bzl%go_dependencies'
              echo 'and then check in the changes'
              git status --porcelain .
              exit 1
            fi

      - run:
          name: run buildifier
          command: |
            bazel run :buildifier -- -r .
            git status
            if [[ -n "$(git status --porcelain .)" ]]; then
              echo 'BUILD files are out-of-date: run `bazel run :buildifier -- -r .` and then check in the changes'
              git status --porcelain .
              exit 1
            fi

  build-bazel:
    <<: *bazel-template
    steps:
      - checkout
      - run:
          name: build busybox
          command: |
            bazel build //src:bb
            ./bazel-bin/src/bb_/bb helloworld
      - run:
          name: build everything (amd64)
          command: bazel build //src/...

  build-bazel-cross:
    <<: *bazel-template
    steps:
      - checkout
      - run:
          name: bazel cross-compile
          command: |
            bazel build --platforms=@io_bazel_rules_go//go/toolchain:linux_arm64 //src:uroot_bb
            bazel build --platforms=@io_bazel_rules_go//go/toolchain:linux_arm64 //src:bb
            bazel build --platforms=@io_bazel_rules_go//go/toolchain:linux_arm //src:uroot_bb
            bazel build --platforms=@io_bazel_rules_go//go/toolchain:linux_arm //src:bb
            bazel build --platforms=@io_bazel_rules_go//go/toolchain:linux_riscv64 //src:uroot_bb
            bazel build --platforms=@io_bazel_rules_go//go/toolchain:linux_riscv64 //src:bb

  build-bazel-test:
    <<: *bazel-template
    steps:
      - checkout
      - run:
          name: bazel test
          command: bazel test //src/...
