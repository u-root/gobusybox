version: 2

templates:
  gopath-template: &gopath-template
    working_directory: /home/circleci/go/src/github.com/u-root/gobusybox
    environment:
      - GOPATH: "/home/circleci/go"
      - CGO_ENABLED: 0
      - GO111MODULE: "off"

  gomod-template: &gomod-template
    working_directory: /home/circleci/gobusybox
    environment:
      - CGO_ENABLED: 0
      - GO111MODULE: "auto"

  go120-template: &go120-template
    docker:
      - image: cimg/go:1.20

  go121-template: &go121-template
    docker:
      - image: cimg/go:1.21

  go122-template: &go122-template
    docker:
      - image: cimg/go:1.22

  build-gomod-template: &build-gomod-template
    steps:
      - checkout
      - run:
          name: individual commands & packages build
          command: |
            (cd src && go build ./...)
            (cd test/diamonddep/mod1 && go build ./...)
            # test/diamonddep/mod2 doesn't build on its own due to mutual
            # dependency.
            (cd test/diamonddep/mod3 && go build ./...)
            (cd test/normaldeps/mod1 && go build ./...)
            (cd test/normaldeps/mod2 && go build ./...)
            (cd test/requestconflict/mod5 && go build ./...)
            (cd test/requestconflict/mod6 && go build ./...)
            (cd test/nested && go build ./...)
            (cd test/nested/nestedmod && go build ./...)
      - run:
          name: tests
          command: ./gobuilds.sh
      - run:
          name: build gokrazy & p9 together
          command: ./test-multi-simple.sh

  build-gomod-multi-template: &build-gomod-multi-template
    steps:
      - checkout
      - run:
          name: build u-root & gokrazy & p9 together
          command: ./test-external.sh

  build-gopath-template: &build-gopath-template
    steps:
      - checkout
      - run:
          name: go env
          command: go env
      - run:
          name: gobuilds-gopath
          command: ./gobuilds-gopath.sh

  test-template: &test-template
    steps:
      - checkout
      - run:
          name: go env
          command: go env
      - run:
          name: test
          command: ./gotest.sh


workflows:
  version: 2
  build:
    jobs:
      - clean-gopath
      - clean-gomod
      - clean-makebb
      - build-gopath-go120:
          requires:
            - clean-makebb
            - clean-gopath
      - build-gopath-go121:
          requires:
            - clean-makebb
            - clean-gopath
      - build-gopath-go122:
          requires:
            - clean-makebb
            - clean-gopath
      - test-go120:
          requires:
            - clean-makebb
            - clean-gopath
            - clean-gomod
      - test-go121:
          requires:
            - clean-makebb
            - clean-gopath
            - clean-gomod
      - test-go122:
          requires:
            - clean-makebb
            - clean-gopath
            - clean-gomod
      - build-gomod-go120:
          requires:
            - clean-makebb
            - clean-gomod
      - build-gomod-go121:
          requires:
            - clean-makebb
            - clean-gomod
      - build-gomod-go122:
          requires:
            - clean-makebb
            - clean-gomod
      - build-gomod-multi-go120:
          requires:
            - clean-makebb
            - clean-gomod
      - build-gomod-multi-go121:
          requires:
            - clean-makebb
            - clean-gomod
      - build-gomod-multi-go122:
          requires:
            - clean-makebb
            - clean-gomod
  nightly:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - main
    jobs:
      - build-gopath-go120
      - build-gopath-go121
      - build-gopath-go122
      - test-go120
      - test-go121
      - test-go122
      - build-gomod-go120
      - build-gomod-go121
      - build-gomod-go122
      - build-gomod-multi-go120
      - build-gomod-multi-go121
      - build-gomod-multi-go122

jobs:
  clean-makebb:
    <<: [*go122-template, *gomod-template]
    steps:
      - checkout
      - run:
          name: check generated code
          command: |
            mkdir -p /home/circleci/go/bin
            go build ./src/cmd/embedvar
            cp ./embedvar $GOPATH/bin
            export PATH=$GOPATH/bin:$PATH
            cd src/pkg/bb
            go generate
            git status
            if [[ -n "$(git status --porcelain .)" ]]; then
              echo 'Generated bbmain code is out of date. Run `go install ./src/cmd/embevar && cd src/pkg/bb && go generate` and then check changes in git.'
              git status --porcelain .
              git diff
              exit 1
            fi

  clean-gopath:
    <<: [*go122-template, *gopath-template]
    steps:
      - checkout
      - run:
          name: gofmt
          command: |
            cd vendortest
            test -z "$(gofmt -s -l $(find -name '*.go' | grep -v /vendor/))"

  build-gopath-go120:
    <<: [*go120-template, *gopath-template, *build-gopath-template]

  build-gopath-go121:
    <<: [*go121-template, *gopath-template, *build-gopath-template]

  build-gopath-go122:
    <<: [*go122-template, *gopath-template, *build-gopath-template]

  test-go120:
    <<: [*go120-template, *gopath-template, *test-template]

  test-go121:
    <<: [*go121-template, *gopath-template, *test-template]

  test-go122:
    <<: [*go122-template, *gopath-template, *test-template]

  clean-gomod:
    <<: [*go122-template, *gomod-template]
    steps:
      - checkout
      - run:
          name: go mod tidy
          command: |
            (cd src && go mod tidy && go mod verify)
            (cd test && go mod tidy && go mod verify)
            (cd vendortest && go mod tidy && go mod verify)
            (cd test/diamonddep/mod1 && go mod tidy && go mod verify)
            # NOTE: Specifically do NOT tidy test/diamondeps/mod2. It doesn't
            # build on its own locally due to the mutual dependency; and we do
            # not want hashes of our own repository in here -- they'll always be
            # out of date.
            (cd test/diamonddep/mod3 && go mod tidy && go mod verify)
            (cd test/goembed && go mod tidy && go mod verify)
            (cd test/normaldeps/mod1 && go mod tidy && go mod verify)
            (cd test/normaldeps/mod2 && go mod tidy && go mod verify)
            (cd test/requestconflict/mod5 && go mod tidy && go mod verify)
            (cd test/requestconflict/mod6 && go mod tidy && go mod verify)
            (cd test/nested && go mod tidy && go mod verify)
            (cd test/nested/nestedmod && go mod tidy && go mod verify)
            git status
            if [[ -n "$(git status --porcelain .)" ]]; then
              echo 'go.mod/go.sum is out-of-date: run `go mod tidy` in the right module directories (see git status) and then check in the changes'
              echo 'If `go mod tidy` results in no changes, make sure you are using the latest relase of Go'
              git status --porcelain .
              exit 1
            fi
      - run:
          name: vet
          command: |
            (cd src && go vet ./...)
            (cd test && go vet ./...)
            (cd test/diamonddep/mod1 && go vet ./...)
            # test/diamonddep/mod2 doesn't build locally on its own due to
            # mutual dependency.
            (cd test/diamonddep/mod3 && go vet ./...)
            (cd test/goembed && go vet ./...)
            (cd test/normaldeps/mod1 && go vet ./...)
            (cd test/normaldeps/mod2 && go vet ./...)
            (cd test/requestconflict/mod5 && go vet ./...)
            (cd test/requestconflict/mod6 && go vet ./...)
            (cd test/nested && go vet ./...)
            (cd test/nested/nestedmod && go vet ./...)
      - run:
          name: gofmt
          command: |
            (cd src && test -z "$(gofmt -s -l $(find -name '*.go'))")
            (cd test && test -z "$(gofmt -s -l $(find -name '*.go'))")

  build-gomod-go120:
    <<: [*go120-template, *gomod-template, *build-gomod-template]

  build-gomod-go121:
    <<: [*go121-template, *gomod-template, *build-gomod-template]

  build-gomod-go122:
    <<: [*go122-template, *gomod-template, *build-gomod-template]

  build-gomod-multi-go120:
    <<: [*go120-template, *gomod-template, *build-gomod-multi-template]

  build-gomod-multi-go121:
    <<: [*go121-template, *gomod-template, *build-gomod-multi-template]

  build-gomod-multi-go122:
    <<: [*go122-template, *gomod-template, *build-gomod-multi-template]
